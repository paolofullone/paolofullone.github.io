<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HealthChecks on Paolo Fullone</title>
    <link>https://paolofullone.github.io/tags/healthchecks/</link>
    <description>Recent content in HealthChecks on Paolo Fullone</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>paolo.enrico@gmail.com (home)</managingEditor>
    <webMaster>paolo.enrico@gmail.com (home)</webMaster>
    <lastBuildDate>Thu, 19 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://paolofullone.github.io/tags/healthchecks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trades GraphQl API</title>
      <link>https://paolofullone.github.io/post/2025-06-19-graphql-benefits/</link>
      <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate><author>paolo.enrico@gmail.com (home)</author>
      <guid>https://paolofullone.github.io/post/2025-06-19-graphql-benefits/</guid>
      <description>&lt;h2 id=&#34;why-graphql-excels-for-querying-large-complex-datasets-a-real-world-trading-api-case-study&#34;&gt;Why GraphQL Excels for Querying Large, Complex Datasets: A Real-World Trading API Case Study&lt;/h2&gt;&#xA;&lt;p&gt;Handling large, complex datasets efficiently is a critical challenge in modern APIs. In a real-world project, I built a .NET GraphQL API integrated with SignalR to retrieve and stream thousands of trades from a database in real time. The &lt;code&gt;Trades&lt;/code&gt; class, with approximately 100 properties (e.g., trade ID, price, volume, timestamp, counterparty details), represents a rich dataset where different domains (e.g., analytics, reporting, trading desks) require specific subsets of data. Previously, I illustrated GraphQL’s benefits with a simplified task management API using a &lt;code&gt;WorkTasks&lt;/code&gt; table. Here, I’ll show how those benefits apply to this real-world trading API, enabling precise, scalable, and flexible querying of trade data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Health Checks</title>
      <link>https://paolofullone.github.io/post/2025-04-26-healthchecks/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate><author>paolo.enrico@gmail.com (home)</author>
      <guid>https://paolofullone.github.io/post/2025-04-26-healthchecks/</guid>
      <description>&lt;p&gt;In a microservices architecture, ensuring each service communicates reliably with databases like SQL Server and Oracle is critical but challenging due to restricted permissions. Health checks monitor service health, and in this post, I focus on advanced checks that execute &lt;em&gt;custom queries&lt;/em&gt; to verify table access, beyond standard NuGet packages. I&amp;rsquo;ve learned to anticipate issues like permission errors, ensuring robust systems for global teams.&lt;/p&gt;&#xA;&lt;p&gt;I developed a &lt;code&gt;MultiDatabase&lt;/code&gt; health check to test specific queries across SQL Server and Oracle, addressing the challenge of limited database access rights that require DBA intervention (e.g., user creation, encrypted connection strings). This check integrates with CI/CD pipelines, catching issues before deployment, complementing my 95% test coverage in projects like RunningTracker.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
