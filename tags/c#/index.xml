<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Paolo Fullone</title>
    <link>https://paolofullone.github.io/tags/c%23/</link>
    <description>Recent content in C# on Paolo Fullone</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>paolo.enrico@gmail.com (home)</managingEditor>
    <webMaster>paolo.enrico@gmail.com (home)</webMaster>
    <lastBuildDate>Sat, 26 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://paolofullone.github.io/tags/c%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Health Checks</title>
      <link>https://paolofullone.github.io/post/2025-04-26-healthchecks/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate><author>paolo.enrico@gmail.com (home)</author>
      <guid>https://paolofullone.github.io/post/2025-04-26-healthchecks/</guid>
      <description>&lt;p&gt;In a microservices architecture, ensuring each service communicates reliably with databases like SQL Server and Oracle is critical but challenging due to restricted permissions. Health checks monitor service health, and in this post, I focus on advanced checks that execute &lt;em&gt;custom queries&lt;/em&gt; to verify table access, beyond standard NuGet packages. I&amp;rsquo;ve learned to anticipate issues like permission errors, ensuring robust systems for global teams.&lt;/p&gt;&#xA;&lt;p&gt;I developed a &lt;code&gt;MultiDatabase&lt;/code&gt; health check to test specific queries across SQL Server and Oracle, addressing the challenge of limited database access rights that require DBA intervention (e.g., user creation, encrypted connection strings). This check integrates with CI/CD pipelines, catching issues before deployment, complementing my 95% test coverage in projects like RunningTracker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RunningTracker API</title>
      <link>https://paolofullone.github.io/post/2025-04-10-runningtracker/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate><author>paolo.enrico@gmail.com (home)</author>
      <guid>https://paolofullone.github.io/post/2025-04-10-runningtracker/</guid>
      <description>&lt;p&gt;Inspired by my running hobby, I built a .NET 8 RESTful API to track amateur runs, focusing on testing mastery. Using Dapper, Docker Compose, and SQL Server with XUnit, Reqnroll, and K6, ensuring robust endpoints.&lt;/p&gt;&#xA;&lt;p&gt;My procurement-honed discipline—20+ years managing complex projects—drove rigorous testing, a skill I apply to production systems.&lt;/p&gt;&#xA;&lt;p&gt;This API, inspired by my running hobby, honed my testing skills in &lt;strong&gt;Unit, Integrated, Functional and Load&lt;/strong&gt; tests. Streamlined testing process for maintainable code, applicable to production systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SignalR for Real-Time Stock Data</title>
      <link>https://paolofullone.github.io/post/2025-04-08-signalr/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><author>paolo.enrico@gmail.com (home)</author>
      <guid>https://paolofullone.github.io/post/2025-04-08-signalr/</guid>
      <description>&lt;p&gt;During the development of this project, I was moving a critical system from &lt;strong&gt;.NET Framework&lt;/strong&gt; to &lt;strong&gt;.NET 8&lt;/strong&gt; in a move to cloud initiative. The legacy system was not designed to be cloud-native and didn&amp;rsquo;t have the tests I spoke about in the &lt;a href=&#34;https://paolofullone.github.io/post/2025-04-10-runningtracker/&#34;&gt;Running Tracker&lt;/a&gt; project.&lt;/p&gt;&#xA;&lt;p&gt;This new Web API was a part of the monolith responsible for retrieving from database all the negotiations made by a number of clients and confirmed in the B3 (Brazilian Stock Exchange), the data was processed to calculate taxes and commissions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka for Microservices</title>
      <link>https://paolofullone.github.io/post/2025-03-16-kafka/</link>
      <pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate><author>paolo.enrico@gmail.com (home)</author>
      <guid>https://paolofullone.github.io/post/2025-03-16-kafka/</guid>
      <description>&lt;p&gt;I helped migrate a .NET monolith to microservices, processing 4-5 million daily operations for financial advisors. Using Kafka and Kubernetes, I streamlined complex commission rules. My 20+ years in procurement enabled me to align teams and deliver tough updates. Despite delays, my refactoring ensured cloud readiness.&lt;/p&gt;&#xA;&lt;p&gt;The application was built using .NET and was running on a &lt;strong&gt;monolithic architecture&lt;/strong&gt; on a Virtual Machine.&lt;/p&gt;&#xA;&lt;p&gt;We decided to use &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; as our message broker to decouple the services and allow for asynchronous communication between them.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
